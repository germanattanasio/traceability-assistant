<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmlns:cas="http:///uima/cas.ecore" xmlns:type="http:///org/apache/uima/ruta/type.ecore" xmlns:xmi="http://www.omg.org/XMI" xmlns:html="http:///org/apache/uima/ruta/type/html.ecore" xmlns:type6="http:///org/cleartk/timeml/type.ecore" xmlns:type5="http:///org/cleartk/syntax/dependency/type.ecore" xmlns:type2="http:///org/cleartk/ne/type.ecore" xmlns:type8="http:///org/cleartk/util/type.ecore" xmlns:cdetector="http:///edu/isistan/carcha/concern/cdetector.ecore" xmlns:tcas="http:///uima/tcas.ecore" xmlns:type7="http:///org/cleartk/token/type.ecore" xmlns:type3="http:///org/cleartk/srl/type.ecore" xmlns:type4="http:///org/cleartk/syntax/constituent/type.ecore" xmlns:ne="http:///org/cleartk/type/ne.ecore" xmi:version="2.0">
    <cas:NULL xmi:id="0"/>
    <cas:Sofa xmi:id="1" sofaNum="2" sofaID="UriView" sofaURI="file:/Users/germanattanasio/workspace/carchatk/carcha/src/test/resources/ddd/1raw/adventure_builder"/>
    <cas:Sofa xmi:id="8" sofaNum="1" sofaID="_InitialView" mimeType="text/plain" sofaString="The Adventure Builder is an e-commerce application that sells adventure packages for vacationers over the Internet. &#10;It uses web services to interact with external suppliers such as banks, airlines, hotels and adventure providers.&#10;&#10;High-level architecture.&#10;&#10;Consumer Website, The web-based user interface of the Adventure Builder is implemented in this module. &#10;The user interface lets the user browse the catalog of travel packages, place a new purchase order, and track the status of existing orders. &#10;This module creates the purchase orders based on user input and passes them to OpcApp for processing. &#10;It uses an implementation of the Model View Controller pattern called the Web Application Framework (waf). &#10;The model is implemented using Entity beans, the controller is implemented using servlets, and the view is a collection of JSPs and static HTML pages. &#10;Part of the client-facing code is implemented using the GWT framework.&#10;&#10;OpcApp stands for Order Processing Center Application. The business logic of the Adventure Builder is implemented in this module. &#10;Accepting purchase order requests from the ConsumerWebsite for processing by hosting the Purchase Order Web Service.&#10;Provide a mechanism for the Consumer Website to query the current status of a purchase order by hosting the Order Tracking Web Service.&#10;Communicate with external suppliers to process and maintain the status of a purchase order.&#10;Upon completion of processing a purchase order, send an email to the customer of its success or failure.&#10;A module decomposition refined view and a module uses refined view of OpcApp are available.&#10;Utils, this module contains utilities used by the Adventure Builder system.&#10;&#10;The dao contains Data Access Object (DAO) utilities, such as a DAO factory. &#10;It does not contain the actual DAO classes that access the database&#10;these classes are inside the ConsumerWebsite module.&#10;The logger contains tracing and debugging utilities. The original name was tracer.&#10;The servicelocator module is an implementation of the ServiceLocator design pattern.&#10;&#10;Google Web Toolkit (gwt) is an open source framework for development of rich internet applications based on Ajax.&#10;The GWT framework was chosen for the following reasons:&#10;It is open source, which allows us to go under the hood and fix things when needed.&#10;It provides a rich development environment with powerful trace/debug, IDE integration and build management.&#10;It integrates well with any other frontend technologies since it does not use proprietary standards.&#10;It offers powerful widget construction features.&#10;There are several extension libraries of widget components available.&#10;Code is written in Java (and translated to JavaScript during build), which is an OO language that is familiar to the majority of the team.&#10;Code is compiled into Javascript, which is available on a very high percentage of browsers.&#10;&#10;Waf stands for Web Application Framework. It is a Model View Controller framework similar to Struts. &#10;It allows you to specify in configuration files the web screens and action that are associated to user clicks on specific elements of the screen. &#10;The configuration file has the mapping of screens and actions to Java classes. The framework provides the engine to display the proper screens and invoke the proper actions.&#10;The WAF framework was chosen because it facilitates the implementation of the Consumer Website code by providing template classes for using the MVC pattern. &#10;For a given user operation, the developer implements an action class (controller) and JSP pages that correspond to the user screens (view). &#10;The developer also uses configuration files to provide a configurable mapping between actions, action classes, events and screens. &#10;The WAF infrastructure can then automatically take http requests and invoke the action classes and JSP screens.&#10;WAF also provides support for event-based communication and internationalization. &#10;&#10;This is the Customer Relationship Manager (CRM) module. The job of this module is to send out an email once an order has been completely and successfully processed. &#10;It is implemented as a message-driven bean. In the future this module can hold additional information about customers that could assist in providing the customers with a better experience. &#10;This could include things like a history of a particular customer's purchases, or sending out periodic emails to customers regarding new and fresh deals.&#10;&#10;Invoice:&#10;This package contains a data structure that holds information that the OPC uses to communicate with external suppliers. &#10;The data structure also holds the status of an order in the invoice (for more information on the lifecycle of an order see the state diagram in the OPC C&amp;C view).&#10;&#10;Mailer:&#10;The mailer is a helper module and its primary responsibility is to send out emails using the Java Mail API. &#10;It is provided with a message and email addresses to send out emails. &#10;In the future this module will be moved to the utils package outside opc.&#10;&#10;Financial:&#10;The financial module is responsible for verifying and charging the customer's credit card. For this purpose it calls the external web services provided by the bank. &#10;The verification of the credit card happens in a synchronous manner and the OPC application waits for the external web service to reply before moving on. &#10;If the response from the banking service is not positive, the OPC application does not further process the order.&#10;&#10;Orderfiller:&#10;This module reads an internal queue of order requests. When an order arrives, it decomposes the order into requests to the different providers involved. &#10;These requests are sent in XML format to internal queues.&#10;&#10;Powebservice:&#10;This module provides a web service that is used by ConsumerWebsite to communicate the details of a purchase order to the OPC for processing. &#10;The web service interface is OpcPurchaseOrderService.&#10;&#10;Submit a complete purchase order for an adventure package. This operation returns the order ID as a String. &#10;The operation simply checks if the PurchaseOrder argument is valid. If it is valid, the order is created in the database and this operation returns to the caller. &#10;The actual processing of the purchase order is carried on in background. &#10;If there is some unforeseen error during the processing of the purchase order after this operation has returned to the caller, &#10;the error is handled elsewhere and is not the responsibility of this interface.&#10;&#10;Error handling:&#10;InvalidPOException. The service throws this exception if the purchase order is null, or if any of the components that make up the purchase order is null.&#10;ProcessingException. If the processing of the purchase order fails after it has passed its validation (there is no InvalidPOException), then a ProcessingException is thrown. &#10;This indicates that the purchase order is valid but something has gone wrong while placing the order.&#10;&#10;Otwebservice:&#10;This module provides a web service that is used by ConsumerWebsite to query the status of an order by providing the order id. &#10;&#10;The exceptions raised by this interface are:&#10;OrderNotFoundException. The service throws this exception if no purchase order with the given order id was found, or the orderId was null or ill-formed,&#10;RemoteException. The caller receives a RemoteException when there is a communication problem with the service provider implementing this interface.&#10;&#10;Orderreceiver:&#10;The Orderreceiver helps in persisting the purchase order in a relational database.&#10;&#10;Workflowmanager:&#10;The workflowmanager coordinates the processing of a purchase order and tracks the status of the purchase order throughout its lifecycle. &#10;The workflow manager mediates the interaction among the other internal modules of the OPC in such a manner that &#10;they (other internal modules) are oblivious to each others existence.&#10;&#10;Purchaseorder:&#10;This package contains the classes that correspond in memory to the data entities required to create a purchase order. &#10;For each data entity, there is a POJO and an entity bean. &#10;The POJOs are used throughout the application as data transfer objects. The data entities in this package are:&#10;Activity, CreditCard, Lodging, PurchaseOrder, Transportation, ContactInfo, Address.&#10;&#10;Webservicebroker:&#10;The webservicebroker is responsible for the interaction via web services with the airline, lodging and activity providers. &#10;This module is divided into two sub-modules described below.&#10;&#10;Requestor, contains classes that can invoke the external web services provided by airline, lodging and activity supplier partners. &#10;It also contains a message-driven bean that can receive messages sent through an internal queue. &#10;These messages contain exactly the requests to be sent to the external web services.&#10;&#10;Provider:&#10;This module provides a web service that is visible to airline, lodging and activity supplier partners. &#10;This web service is implemented in a session bean and is used by the external partners to submit the result of processing requests made to them. &#10;Calls to this web service are forwarded to an internal queue.&#10;&#10;Processmanager:&#10;The processmanager is used by the otwebservice module to retrieve from the database adventure package purchase orders and their updated status. &#10;It is also used by the workflowmanager to retrieve the orders placed with the external providers and persist their status. &#10;This module contains the submodules described below.&#10;&#10;Ejb, contains a session bean that offers operations to retrieve orders and update the status of a &#10;given order (both the adventure purchase order and the orders placed with the partner suppliers).&#10;&#10;Manager-ejb:&#10;Contains an entity bean to persist a purchase order. The entity bean uses container-managed persistence (CMP).&#10;&#10;PoEndPointBean:&#10;This class is a stateless session bean. It provides the implementation for the OpcPurchaseOrderService web service. &#10;When it receives a purchase order, it checks that all arguments are valid and if ok dispatches the order to the workflowmanager sending a message to a JMS queue.&#10;&#10;WorkFlowManagerBean:&#10;This class is a message-driven bean. It is activated when there is a message in the queue. It processes two kinds of messages:&#10;purchase order message, in this case it calls the PoHandler class. &#10;The sequence diagram down below shows the interactions involved in processing a purchase order.&#10;invoice message, this is a message that came from one of the external suppliers in response for a booking order. &#10;WorkFlowManagerBean calls the InvoiceHandler class to take care of this messages.&#10;WorkFlowManagerBean also sets a timer with the EJB container so that it is activated periodically to check the status of all pending orders.&#10;&#10;PoHandler:&#10;The PoHandler class is not visible outside the workflowmanager package. &#10;It acts as a delegate of the WorkFlowManagerBean class to handle any purchase order request. &#10;When processing a request, it first uses POReceiver and processmanager to insert the order in the database in the Pending state. &#10;Then it calls CreditCardVerifier synchronously to charge the customer's credit card. If the credit card is OK, &#10;it sends a message to a JMS queue to be processed by OrderFillerBean. &#10;Finally, it sends another JMS message to CrmBean, which will create and send an email to the customer informing about the status of his order.&#10;&#10;InvoiceHandler:&#10;The InvoiceHandler is not visible outside the workflowmanager package. &#10;It acts as a delegate of the WorkflowManagerBean class to handle any invoice it receives from any of the suppliers. &#10;When an invoice is received, InvoiceHandler basically uses processmanager to update the status of the corresponding order. &#10;A given adventure package order may consist of:&#10;zero or one hotel booking, zero, one or two airline flights (departing and returning flight), zero or more activity items.&#10;&#10;When InvoiceHandler receives the last invoice confirming completion of the reservation, it sends a JMS message to CrmBean to notify the customer via email.&#10;&#10;CrmBean:&#10;This class is a message-driven bean. It is responsible for handling the communication with customers via email.&#10;&#10;CreditCardVerifier:&#10;This class is used to verify the credit information for a user. &#10;It contacts an external web service to get the banking related information for the credit card number specified.&#10;&#10;OrderFillerBean:&#10;This class is a message-driven bean. It is responsible for sending out all the booking requests to the airline, &#10;lodging and activity suppliers involved in a given purchase order.&#10;&#10;POReceiver:&#10;The purchase order receiver's responsibility is to create a purchase order entity bean and persist it in a relational database. &#10;The POReceiver is implemented as a Java class and it creates a PurchaseOrder entity bean.&#10;&#10;Invoice:&#10;This &quot;value object&quot; class holds the data for an invoice that arrives from any of the external suppliers. &#10;It has a method to provide an XML representation of the invoice.&#10;&#10;&#10;SMTP host, message body contents, subject, sender address and reply-to address for all &#10;email messages sent by CrmBean are configurable via text files that can be changed at run time, &#10;but require re-initialization of the application to take effect. &#10;These files are implemented using standard Java i18n support. &#10;&#10;Web browser:&#10;This component represents the user interface of the application running on a web browser. &#10;Consumer Website is a Web 2.0 application implemented using GWT. Therefore, in addition to HTML, &#10;the web browser runs JavaScript code that uses Ajax to communicate with the server. &#10;Using the web browser, a customer of Adventure Builder opens the web site, &#10;browses through the existing catalog of adventure packages, places orders, and tracks the status of existing orders.&#10;&#10;Consumer Website:&#10;The ConsumerWebsite is a multi-tier application implemented using Java EE technology. &#10;It's the client facing part of the Adventure Builder system. &#10;It is implemented using GWT code, a number of JSP and html pages, and standard components of the WAF framework. &#10;Its primary responsibility is to process the http requests coming from customers browsing the catalog or placing/tracking orders. &#10;Requests to place or track orders are relayed to the OPC application via SOAP web services.&#10;See the Consumer Website Multi-tier View for a description of the internal components of Consumer Website.&#10;&#10;OPC:&#10;OPC is the order processing center application. It's a Java EE application that communicates with external components using SOAP web services. &#10;Internally, it consists of loosely coupled EJBs that communicate with each other using primarily asynchronous messaging. &#10;The internal architecture follows the message channel design pattern [Hohpe 2003]. &#10;See the OPC C&amp;C View for a description of the internal components of OPC. &#10;&#10;The core functionality of the Adventure Builder is implemented in this module. Its major functions are:&#10;Accept purchase order requests from the ConsumerWebsite for processing,&#10;Fill a purchase order by communicating with external suppliers.&#10;Provide a mechanism for the Consumer Website to query the current status of a purchase order,&#10;Upon completion of processing a purchase order, send an email to the customer reporting its success or failure.&#10;&#10;OPC provides the following interfaces, which are exposed as SOAP web services.&#10;OpcPurchaseOrderService, used to create a purchase order.&#10;OpcOrderTrackingService, used to track the status of a purchase order.&#10;WebServiceBroker, used by external suppliers to submit invoices back to OPC.&#10;&#10;OPC requires the following interfaces, which are provided by external partners as SOAP web services.&#10;CreditCardService, used to validate the credit card transaction with a bank.&#10;AirlinePOService, used to send purchase orders to external airline suppliers.&#10;LodgingPOService, used to send purchase orders to external lodging suppliers.&#10;ActivityPOService, used to send purchase orders to external activity suppliers.&#10;&#10;The UML activity diagram below shows the processing of a purchase order.&#10;It uses a split-and-join pattern when filling an order. &#10;For simplicity, the diagram does not show interaction with a database.&#10;Following is the equivalent diagram using the BPMN notation.&#10;&#10;Adventure Catalog DB, this is a relational database that stores the adventure builder catalog containing various adventure packages. &#10;It also stores information about users for user authentication and authorization. &#10;The database server is MySQL Cluster 7.0 configured to use the InnoDB engine.&#10;&#10;Adventure OPC DB, this relational database stores purchase orders, invoices coming from the external suppliers and related information. &#10;The database server is MySQL configured to use the InnoDB engine.&#10;The service registry is a data repository that works as a basic registry of the external services used by OPC. &#10;More specifically, it has name, location and metadata about all the SOAP web services offered by the banks, &#10;airline, lodging, and activity external partners, use a relational database or XML based files.&#10;&#10;SignOnFilter:&#10;This component is a Java EE Filter. &#10;It intercepts all http requests (url pattern is &quot;/*&quot;) and checks if the current user (if any) has authorization to perform the requested transaction (identified by the selected URL). &#10;If an unsigned in user requested a page that requires a signed in user, the call is redirected to the sign in page.&#10;&#10;sign-on-config-xml:&#10;This xml file contains configurable information about the authentication and authorization constraints for specific URLs in the system. &#10;It also has the URLs for the sign in page and sign in error page.&#10;&#10;MainServlet:&#10;This servlet is part of the WAF framework. It corresponds to the controller component in the MVC implementation within WAF. &#10;It processes http requests to URLs that end with &quot;do&quot; and correspond to user clicks (eg, submit button on a form). &#10;Internally, this servlet uses a configurable table loaded at initialization that maps each particular URL to the Consumer Website action class that will process that request. &#10;These action classes extend HTMLActionSupport. &#10;Each specific action class will instantiate specific POJOs and interact with specific facade session beans. &#10;The URL mapping table is read from the mappings-xml file. &#10;After the execution of the action class, the http request is forwarded to a URL that ends with &quot;screen&quot;. &#10;The mapping between specific actions and screens is also configurable and stored in mappings-xml. Calls to *screen are handled by TemplateServlet.&#10;MainServlet is also responsible for database transaction demarcation: if the requested user operation is transactional, &#10;this component starts a transaction and calls commit or rollback when processing the request is finished. &#10;MainServlet is also responsible for centralized exception handling in the Consumer Website application. &#10;Exceptions that bubble up to MainServlet are caught and based on a mapping defined in mappings-xml, the http request is forwarded to a specific &quot;screen&quot; URL (typically an error page).&#10;&#10;mappings-xml.&#10;Simple xml file that contains the mappings of URLs (ending with &quot;do&quot;) to: action classes (subclasses of HTMLActionSupport) and &quot;screen&quot; URLs. &#10;This file also contains the mapping of Java exception classes to &quot;screen&quot; URLs.&#10;&#10;TemplateServlet.&#10;This servlet is also part of the WAF framework. During initialization, &#10;this servlet retrieves the current locale and reads the proper i18n configurable data from screendefinitions-xml. &#10;Other configurable parameters are defined in web-xml (not shown in the primary presentation). &#10;When this servlet receives a forwarded http request from MainServlet, &#10;it uses the mapping between screen names (URL ends with &quot;screen&quot;) and JSP pages to once again forward the request to the appropriate JSP pages. &#10;These JSP pages are called screen JSP.&#10;&#10;screendefinitions-xml.&#10;All screens in the website have the same structure: a title, a banner, a sidebar, a footer and the body. &#10;The screendefinitions-xml file contains a configurable mapping between screen names and the set of JSP pages that compose the title, banner, sidebar, footer and body of that screen.&#10;&#10;screen-jsp:&#10;A regular JSP that corresponds to a (part of a) web screen. &#10;The data required for filling up the fields in a screen JSP was set in the http request by MainServlet when the action was executed. &#10;However, in some situations, a screen JSP makes calls to the facade session beans to retrieve additional data.&#10;&#10;index-jsp:&#10;This is the welcome page of the Consumer Website application. &#10;It has basically links to sign in and other basic operations.&#10;&#10;SignOnNotifier:&#10;This component is a context listener. More specifically, it is a HttpSessionAttributeListener. &#10;It is invoked by the container whenever an attribute in the http session changes. &#10;When the signed in user attribute is removed because the user signed out or the http session expired, this component releases resources that were allocated for that user.&#10;&#10;OrderFacade:&#10;This stateless session bean is a lightweight implementation of the Session Facade pattern [Marinescu 2002]. &#10;It provides operations that correspond to the business logic of use cases related to purchase order. More specifically, &#10;it provides operations to place an order and track the status of a given order. &#10;To carry on these operations, the session bean interacts with the OPC application via SOAP web services. &#10;In addition, this session bean has operations to add and remove items to and from the user's shopping cart.&#10;&#10;CatalogFacade:&#10;This stateless session bean is a lightweight implementation of the Session Facade pattern [Marinescu 2002]. &#10;It provides operations related to the catalog of adventure packages. &#10;It allows browsing and searching the catalog, and looking at details of a given adventure travel package. &#10;Internally, this session bean makes use of DAO classes to retrieve the information in Adventure Catalog DB.&#10;&#10;UserMgmtFacade:&#10;This stateless session bean also implements the Session Facade pattern [Marinescu 2002]. &#10;It provides operations related to user management, which include: retrieving and updating user data,&#10; validating user-ID/password sign on, blocking a user after a certain number of unsuccessful sign in attempts. &#10;Internally, this session bean makes use of DAO classes to retrieve the information in Adventure Catalog DB.&#10;&#10;PoEndPointBean:&#10;This stateless session bean implements the SOAP web services interface called OpcPurchaseOrderService. &#10;When a purchase order request arrives, it simply validates the order and, if OK, sends the order to the WorkFlowMgrQueue using JMS.&#10;&#10;OtEndPointBean:&#10;This stateless session bean implements the SOAP web services interface called OpcOrderTrackingService. &#10;Requests for information about an order are handled by interacting with ProcessManagerBean. &#10;Order information is retrieved using the PurchaseOrderBean entity bean.&#10;&#10;WorkFlowManagerBean:&#10;This message-driven bean is activated when there is a message in the WorkFlowMgrQueue. &#10;purchase order message. When processing such messages, this component interacts with ProcessManagerBean to insert the order in the database in the Pending state. &#10;Then it interacts synchronously with the Bank external service provider to validate and charge the customer's credit card. &#10;If the credit card is OK, it sends a message to the OrderFillerQueue JMS queue to be processed by OrderFillerBean. &#10;Finally, it sends another message to CRMQueue, which will be processed by CrmBean (send email to the customer informing the order is being processed).&#10;invoice message. This is a message that came from one of the external suppliers in response for a booking order. &#10;When an invoice message is received, this component basically interacts with ProcessManagerBean to update the status of the corresponding order. &#10;If the message confirms the last invoice that is part of a travel package order, WorkFlowManagerBean sends a JMS message to CrmBean to notify the customer via email.&#10;WorkFlowManagerBean also sets a timer with the EJB container so that it is activated periodically to check the status of all pending orders.&#10;WofkFlowManagerBean is one of the two components in the Adventure Builder system that act as service user of external services (the other is BrokerRequestorBean).&#10;The life cycle of a purchase order can be summarized by the following UML state machine diagram.&#10;&#10;Scalability:&#10;All the components that are SOAP web service providers in the Adventure Builder System are implemented using stateless session beans. &#10;This type of EJB component can be replicated across machines in a cluster and each machine can also make available a pool of such EJBs. &#10;This feature allows scaling of the number of requests it can handle. Horizontal scalability is achievable by adding more machines to the cluster. &#10;Vertical scalability is also an option by increasing the capacity of any machine (and then increasing the number of EJB instances in each EJB pool). &#10;See EJB configuration discussion in OPC C&amp;C View#Variability Guide.&#10;Nevertheless, the transactions performed by these stateless session beans ultimately require access to the database. &#10;The database cannot be easily replicated and may become a performance bottleneck if the number of calls increases beyond expectation.&#10;&#10;Deployment:&#10;The entire Adventure Builder system is deployed as two ear files (consumerwebsite-ear and opc-ear). &#10;Having two separate ear files allows to deploy the two corresponding applications on different application server instances and different machines. &#10;These separate target runtime environments can then be configured according with the processing and communication needs of each application. &#10;TODO: why ProcessManagerBean and ManagerBean are deployed in a separate EJB jar file (processmanager-ejb)&#10;&#10;Coarse-grained granularity of service:&#10;Currently we only expose placing a purchase order as a single web service that includes placing orders for activities, transportation and lodging. &#10;We don't provide separate operations to place an order only for flights, lodging or activities. &#10;Therefore, this interface is less flexible in terms of composing different kinds of orders. &#10;On the other hand, submitting a complete purchase order involves a single call.&#10;&#10;Using JAX-RPC for passing parameters:&#10;Since the consumer website and the order processing center reside in the same enterprise,&#10;we avoid using complex XML processing and pass parameters as Java objects. &#10;It makes the interface slightly less interoperable but simplifies implementation.&#10;&#10;Publishing the web service as a WSDL:&#10;This web service is published as a WSDL in a well known location &#10;(static web service instead of using a registry) since it is not available for general public use. &#10;It is only used by the consumer website. The option to use SOAP instead of &#10;Java RMI or direct EJB calls is motivated by the possibility of replacing the Consumer website implementation,&#10;with a different technology (e.g. NET); &#10;SOAP can provide the required interoperability in that case.&#10;&#10;Using the EJB endpoint type:&#10;We chose the EJB endpoint type because the order processing center is implemented using a set of session beans."/>
    <type7:Sentence xmi:id="33663" sofa="8" begin="0" end="115"/>
    <type7:Sentence xmi:id="34302" sofa="8" begin="117" end="230"/>
    <type7:Sentence xmi:id="34957" sofa="8" begin="232" end="256"/>
    <type7:Sentence xmi:id="35040" sofa="8" begin="258" end="360"/>
    <type7:Sentence xmi:id="35611" sofa="8" begin="362" end="502"/>
    <type7:Sentence xmi:id="36543" sofa="8" begin="504" end="605"/>
    <type7:Sentence xmi:id="37185" sofa="8" begin="607" end="713"/>
    <type7:Sentence xmi:id="37840" sofa="8" begin="715" end="865"/>
    <type7:Sentence xmi:id="38886" sofa="8" begin="867" end="937"/>
    <type7:Sentence xmi:id="39331" sofa="8" begin="939" end="993"/>
    <type7:Sentence xmi:id="39595" sofa="8" begin="994" end="1068"/>
    <type7:Sentence xmi:id="40040" sofa="8" begin="1070" end="1186"/>
    <type7:Sentence xmi:id="40637" sofa="8" begin="1187" end="1322"/>
    <type7:Sentence xmi:id="41515" sofa="8" begin="1323" end="1414"/>
    <type7:Sentence xmi:id="42025" sofa="8" begin="1415" end="1519"/>
    <type7:Sentence xmi:id="42693" sofa="8" begin="1520" end="1611"/>
    <type7:Sentence xmi:id="43283" sofa="8" begin="1612" end="1687"/>
    <type7:Sentence xmi:id="43741" sofa="8" begin="1689" end="1764"/>
    <type7:Sentence xmi:id="44280" sofa="8" begin="1766" end="1886"/>
    <type7:Sentence xmi:id="45061" sofa="8" begin="1887" end="1939"/>
    <type7:Sentence xmi:id="45344" sofa="8" begin="1940" end="1969"/>
    <type7:Sentence xmi:id="45553" sofa="8" begin="1970" end="2054"/>
    <type7:Sentence xmi:id="45959" sofa="8" begin="2056" end="2169"/>
    <type7:Sentence xmi:id="46692" sofa="8" begin="2170" end="2309"/>
    <type7:Sentence xmi:id="47825" sofa="8" begin="2310" end="2417"/>
    <type7:Sentence xmi:id="48373" sofa="8" begin="2418" end="2518"/>
    <type7:Sentence xmi:id="48960" sofa="8" begin="2519" end="2567"/>
    <type7:Sentence xmi:id="49198" sofa="8" begin="2568" end="2637"/>
    <type7:Sentence xmi:id="49572" sofa="8" begin="2638" end="2776"/>
    <type7:Sentence xmi:id="50632" sofa="8" begin="2777" end="2868"/>
    <type7:Sentence xmi:id="51278" sofa="8" begin="2870" end="2911"/>
    <type7:Sentence xmi:id="51513" sofa="8" begin="2912" end="2970"/>
    <type7:Sentence xmi:id="51903" sofa="8" begin="2972" end="3117"/>
    <type7:Sentence xmi:id="52943" sofa="8" begin="3119" end="3197"/>
    <type7:Sentence xmi:id="53407" sofa="8" begin="3198" end="3292"/>
    <type7:Sentence xmi:id="53987" sofa="8" begin="3293" end="3449"/>
    <type7:Sentence xmi:id="54907" sofa="8" begin="3451" end="3590"/>
    <type7:Sentence xmi:id="55853" sofa="8" begin="3592" end="3722"/>
    <type7:Sentence xmi:id="56555" sofa="8" begin="3724" end="3835"/>
    <type7:Sentence xmi:id="57183" sofa="8" begin="3836" end="3917"/>
    <type7:Sentence xmi:id="57534" sofa="8" begin="3920" end="3975"/>
    <type7:Sentence xmi:id="57921" sofa="8" begin="3976" end="4084"/>
    <type7:Sentence xmi:id="58721" sofa="8" begin="4086" end="4129"/>
    <type7:Sentence xmi:id="58998" sofa="8" begin="4130" end="4274"/>
    <type7:Sentence xmi:id="59857" sofa="8" begin="4276" end="4429"/>
    <type7:Sentence xmi:id="60793" sofa="8" begin="4431" end="4559"/>
    <type7:Sentence xmi:id="61626" sofa="8" begin="4561" end="4723"/>
    <type7:Sentence xmi:id="62808" sofa="8" begin="4725" end="4840"/>
    <type7:Sentence xmi:id="63666" sofa="8" begin="4842" end="4911"/>
    <type7:Sentence xmi:id="64185" sofa="8" begin="4913" end="4986"/>
    <type7:Sentence xmi:id="64711" sofa="8" begin="4988" end="5089"/>
    <type7:Sentence xmi:id="65272" sofa="8" begin="5090" end="5163"/>
    <type7:Sentence xmi:id="65762" sofa="8" begin="5165" end="5318"/>
    <type7:Sentence xmi:id="66721" sofa="8" begin="5320" end="5433"/>
    <type7:Sentence xmi:id="67450" sofa="8" begin="5435" end="5502"/>
    <type7:Sentence xmi:id="67866" sofa="8" begin="5503" end="5600"/>
    <type7:Sentence xmi:id="68502" sofa="8" begin="5602" end="5659"/>
    <type7:Sentence xmi:id="68876" sofa="8" begin="5661" end="5815"/>
    <type7:Sentence xmi:id="69887" sofa="8" begin="5817" end="5870"/>
    <type7:Sentence xmi:id="70125" sofa="8" begin="5872" end="5930"/>
    <type7:Sentence xmi:id="70447" sofa="8" begin="5931" end="5979"/>
    <type7:Sentence xmi:id="70782" sofa="8" begin="5981" end="6048"/>
    <type7:Sentence xmi:id="71188" sofa="8" begin="6049" end="6143"/>
    <type7:Sentence xmi:id="71888" sofa="8" begin="6145" end="6217"/>
    <type7:Sentence xmi:id="72362" sofa="8" begin="6219" end="6426"/>
    <type7:Sentence xmi:id="73670" sofa="8" begin="6428" end="6463"/>
    <type7:Sentence xmi:id="73821" sofa="8" begin="6464" end="6597"/>
    <type7:Sentence xmi:id="74870" sofa="8" begin="6598" end="6618"/>
    <type7:Sentence xmi:id="74927" sofa="8" begin="6619" end="6771"/>
    <type7:Sentence xmi:id="75928" sofa="8" begin="6773" end="6874"/>
    <type7:Sentence xmi:id="76651" sofa="8" begin="6876" end="7015"/>
    <type7:Sentence xmi:id="77649" sofa="8" begin="7018" end="7086"/>
    <type7:Sentence xmi:id="78007" sofa="8" begin="7087" end="7232"/>
    <type7:Sentence xmi:id="78959" sofa="8" begin="7233" end="7363"/>
    <type7:Sentence xmi:id="79698" sofa="8" begin="7365" end="7462"/>
    <type7:Sentence xmi:id="80211" sofa="8" begin="7464" end="7617"/>
    <type7:Sentence xmi:id="81014" sofa="8" begin="7619" end="7801"/>
    <type7:Sentence xmi:id="82102" sofa="8" begin="7803" end="7935"/>
    <type7:Sentence xmi:id="82948" sofa="8" begin="7937" end="7994"/>
    <type7:Sentence xmi:id="83399" sofa="8" begin="7996" end="8067"/>
    <type7:Sentence xmi:id="83815" sofa="8" begin="8068" end="8190"/>
    <type7:Sentence xmi:id="84425" sofa="8" begin="8192" end="8332"/>
    <type7:Sentence xmi:id="85128" sofa="8" begin="8334" end="8394"/>
    <type7:Sentence xmi:id="85502" sofa="8" begin="8396" end="8526"/>
    <type7:Sentence xmi:id="86253" sofa="8" begin="8528" end="8624"/>
    <type7:Sentence xmi:id="86892" sofa="8" begin="8626" end="8710"/>
    <type7:Sentence xmi:id="87424" sofa="8" begin="8712" end="8824"/>
    <type7:Sentence xmi:id="88130" sofa="8" begin="8826" end="8970"/>
    <type7:Sentence xmi:id="89108" sofa="8" begin="8972" end="9033"/>
    <type7:Sentence xmi:id="89524" sofa="8" begin="9035" end="9194"/>
    <type7:Sentence xmi:id="90353" sofa="8" begin="9196" end="9318"/>
    <type7:Sentence xmi:id="91137" sofa="8" begin="9320" end="9372"/>
    <type7:Sentence xmi:id="91443" sofa="8" begin="9374" end="9570"/>
    <type7:Sentence xmi:id="92779" sofa="8" begin="9572" end="9637"/>
    <type7:Sentence xmi:id="93198" sofa="8" begin="9638" end="9695"/>
    <type7:Sentence xmi:id="93530" sofa="8" begin="9697" end="9752"/>
    <type7:Sentence xmi:id="93865" sofa="8" begin="9753" end="9828"/>
    <type7:Sentence xmi:id="94213" sofa="8" begin="9830" end="9991"/>
    <type7:Sentence xmi:id="95417" sofa="8" begin="9993" end="10050"/>
    <type7:Sentence xmi:id="95723" sofa="8" begin="10051" end="10104"/>
    <type7:Sentence xmi:id="96207" sofa="8" begin="10105" end="10207"/>
    <type7:Sentence xmi:id="96940" sofa="8" begin="10209" end="10304"/>
    <type7:Sentence xmi:id="97485" sofa="8" begin="10305" end="10417"/>
    <type7:Sentence xmi:id="98299" sofa="8" begin="10419" end="10500"/>
    <type7:Sentence xmi:id="98757" sofa="8" begin="10501" end="10641"/>
    <type7:Sentence xmi:id="99664" sofa="8" begin="10643" end="10725"/>
    <type7:Sentence xmi:id="100096" sofa="8" begin="10727" end="10819"/>
    <type7:Sentence xmi:id="100667" sofa="8" begin="10821" end="10949"/>
    <type7:Sentence xmi:id="101506" sofa="8" begin="10951" end="11035"/>
    <type7:Sentence xmi:id="101980" sofa="8" begin="11036" end="11132"/>
    <type7:Sentence xmi:id="102745" sofa="8" begin="11134" end="11276"/>
    <type7:Sentence xmi:id="103739" sofa="8" begin="11278" end="11364"/>
    <type7:Sentence xmi:id="104142" sofa="8" begin="11366" end="11481"/>
    <type7:Sentence xmi:id="104956" sofa="8" begin="11483" end="11605"/>
    <type7:Sentence xmi:id="105692" sofa="8" begin="11607" end="11777"/>
    <type7:Sentence xmi:id="106772" sofa="8" begin="11779" end="11934"/>
    <type7:Sentence xmi:id="107731" sofa="8" begin="11936" end="11981"/>
    <type7:Sentence xmi:id="108037" sofa="8" begin="11982" end="12056"/>
    <type7:Sentence xmi:id="108489" sofa="8" begin="12058" end="12141"/>
    <type7:Sentence xmi:id="109031" sofa="8" begin="12143" end="12255"/>
    <type7:Sentence xmi:id="109718" sofa="8" begin="12257" end="12310"/>
    <type7:Sentence xmi:id="110024" sofa="8" begin="12311" end="12453"/>
    <type7:Sentence xmi:id="110911" sofa="8" begin="12455" end="12594"/>
    <type7:Sentence xmi:id="111727" sofa="8" begin="12596" end="12685"/>
    <type7:Sentence xmi:id="112285" sofa="8" begin="12687" end="12800"/>
    <type7:Sentence xmi:id="113073" sofa="8" begin="12802" end="12866"/>
    <type7:Sentence xmi:id="113560" sofa="8" begin="12869" end="13118"/>
    <type7:Sentence xmi:id="115155" sofa="8" begin="13120" end="13181"/>
    <type7:Sentence xmi:id="115490" sofa="8" begin="13184" end="13286"/>
    <type7:Sentence xmi:id="116116" sofa="8" begin="13288" end="13352"/>
    <type7:Sentence xmi:id="116574" sofa="8" begin="13353" end="13469"/>
    <type7:Sentence xmi:id="117372" sofa="8" begin="13471" end="13663"/>
    <type7:Sentence xmi:id="118550" sofa="8" begin="13665" end="13768"/>
    <type7:Sentence xmi:id="119121" sofa="8" begin="13770" end="13830"/>
    <type7:Sentence xmi:id="119566" sofa="8" begin="13832" end="13943"/>
    <type7:Sentence xmi:id="120372" sofa="8" begin="13945" end="14074"/>
    <type7:Sentence xmi:id="121088" sofa="8" begin="14076" end="14167"/>
    <type7:Sentence xmi:id="121675" sofa="8" begin="14168" end="14274"/>
    <type7:Sentence xmi:id="122285" sofa="8" begin="14276" end="14328"/>
    <type7:Sentence xmi:id="122620" sofa="8" begin="14329" end="14423"/>
    <type7:Sentence xmi:id="123233" sofa="8" begin="14425" end="14545"/>
    <type7:Sentence xmi:id="123911" sofa="8" begin="14547" end="14629"/>
    <type7:Sentence xmi:id="124372" sofa="8" begin="14631" end="14704"/>
    <type7:Sentence xmi:id="124898" sofa="8" begin="14707" end="14785"/>
    <type7:Sentence xmi:id="125343" sofa="8" begin="14786" end="14946"/>
    <type7:Sentence xmi:id="126215" sofa="8" begin="14947" end="15152"/>
    <type7:Sentence xmi:id="127558" sofa="8" begin="15154" end="15232"/>
    <type7:Sentence xmi:id="128071" sofa="8" begin="15233" end="15290"/>
    <type7:Sentence xmi:id="128390" sofa="8" begin="15291" end="15361"/>
    <type7:Sentence xmi:id="128819" sofa="8" begin="15362" end="15438"/>
    <type7:Sentence xmi:id="129287" sofa="8" begin="15440" end="15540"/>
    <type7:Sentence xmi:id="129897" sofa="8" begin="15541" end="15617"/>
    <type7:Sentence xmi:id="130342" sofa="8" begin="15618" end="15695"/>
    <type7:Sentence xmi:id="130758" sofa="8" begin="15696" end="15773"/>
    <type7:Sentence xmi:id="131174" sofa="8" begin="15774" end="15853"/>
    <type7:Sentence xmi:id="131590" sofa="8" begin="15855" end="15927"/>
    <type7:Sentence xmi:id="132035" sofa="8" begin="15928" end="15983"/>
    <type7:Sentence xmi:id="132425" sofa="8" begin="15985" end="16055"/>
    <type7:Sentence xmi:id="132854" sofa="8" begin="16056" end="16116"/>
    <type7:Sentence xmi:id="133231" sofa="8" begin="16118" end="16250"/>
    <type7:Sentence xmi:id="133973" sofa="8" begin="16252" end="16333"/>
    <type7:Sentence xmi:id="134392" sofa="8" begin="16335" end="16412"/>
    <type7:Sentence xmi:id="134911" sofa="8" begin="16414" end="16549"/>
    <type7:Sentence xmi:id="135614" sofa="8" begin="16551" end="16616"/>
    <type7:Sentence xmi:id="136075" sofa="8" begin="16617" end="16727"/>
    <type7:Sentence xmi:id="136853" sofa="8" begin="16729" end="16933"/>
    <type7:Sentence xmi:id="138146" sofa="8" begin="16935" end="16984"/>
    <type7:Sentence xmi:id="138481" sofa="8" begin="16986" end="17168"/>
    <type7:Sentence xmi:id="139857" sofa="8" begin="17170" end="17285"/>
    <type7:Sentence xmi:id="140829" sofa="8" begin="17287" end="17442"/>
    <type7:Sentence xmi:id="141542" sofa="8" begin="17444" end="17509"/>
    <type7:Sentence xmi:id="142100" sofa="8" begin="17511" end="17566"/>
    <type7:Sentence xmi:id="142487" sofa="8" begin="17567" end="17647"/>
    <type7:Sentence xmi:id="142929" sofa="8" begin="17649" end="17763"/>
    <type7:Sentence xmi:id="143892" sofa="8" begin="17765" end="17939"/>
    <type7:Sentence xmi:id="144977" sofa="8" begin="17941" end="17987"/>
    <type7:Sentence xmi:id="145186" sofa="8" begin="17989" end="18096"/>
    <type7:Sentence xmi:id="145724" sofa="8" begin="18098" end="18155"/>
    <type7:Sentence xmi:id="146088" sofa="8" begin="18157" end="18261"/>
    <type7:Sentence xmi:id="146889" sofa="8" begin="18263" end="18360"/>
    <type7:Sentence xmi:id="147411" sofa="8" begin="18361" end="18409"/>
    <type7:Sentence xmi:id="147795" sofa="8" begin="18410" end="18636"/>
    <type7:Sentence xmi:id="149092" sofa="8" begin="18638" end="18741"/>
    <type7:Sentence xmi:id="149579" sofa="8" begin="18743" end="18926"/>
    <type7:Sentence xmi:id="150835" sofa="8" begin="18928" end="18941"/>
    <type7:Sentence xmi:id="150879" sofa="8" begin="18942" end="19083"/>
    <type7:Sentence xmi:id="151910" sofa="8" begin="19085" end="19164"/>
    <type7:Sentence xmi:id="152423" sofa="8" begin="19166" end="19182"/>
    <type7:Sentence xmi:id="152480" sofa="8" begin="19183" end="19230"/>
    <type7:Sentence xmi:id="152841" sofa="8" begin="19231" end="19368"/>
    <type7:Sentence xmi:id="153473" sofa="8" begin="19370" end="19463"/>
    <type7:Sentence xmi:id="153999" sofa="8" begin="19465" end="19679"/>
    <type7:Sentence xmi:id="155482" sofa="8" begin="19681" end="19719"/>
    <type7:Sentence xmi:id="155788" sofa="8" begin="19721" end="19743"/>
    <type7:Sentence xmi:id="155832" sofa="8" begin="19744" end="19848"/>
    <type7:Sentence xmi:id="156650" sofa="8" begin="19850" end="20031"/>
    <type7:Sentence xmi:id="157788" sofa="8" begin="20033" end="20104"/>
    <type7:Sentence xmi:id="158392" sofa="8" begin="20106" end="20238"/>
    <type7:Sentence xmi:id="159377" sofa="8" begin="20240" end="20350"/>
    <type7:Sentence xmi:id="160126" sofa="8" begin="20352" end="20424"/>
    <type7:Sentence xmi:id="160571" sofa="8" begin="20426" end="20487"/>
    <type7:Sentence xmi:id="161035" sofa="8" begin="20489" end="20542"/>
    <type7:Sentence xmi:id="161341" sofa="8" begin="20543" end="20599"/>
    <type7:Sentence xmi:id="161605" sofa="8" begin="20601" end="20682"/>
    <type7:Sentence xmi:id="162176" sofa="8" begin="20684" end="20854"/>
    <type7:Sentence xmi:id="163361" sofa="8" begin="20856" end="20976"/>
    <type7:Sentence xmi:id="164016" sofa="8" begin="20978" end="21078"/>
    <type7:Sentence xmi:id="164720" sofa="8" begin="21079" end="21178"/>
    <type7:Sentence xmi:id="165413" sofa="8" begin="21180" end="21284"/>
    <type7:Sentence xmi:id="166052" sofa="8" begin="21286" end="21393"/>
    <type7:Sentence xmi:id="166800" sofa="8" begin="21395" end="21517"/>
    <type7:Sentence xmi:id="167455" sofa="8" begin="21519" end="21587"/>
    <type7:Sentence xmi:id="167868" sofa="8" begin="21589" end="21694"/>
    <type7:Sentence xmi:id="168503" sofa="8" begin="21696" end="21803"/>
    <type7:Sentence xmi:id="169184" sofa="8" begin="21805" end="21909"/>
    <type7:Sentence xmi:id="169742" sofa="8" begin="21911" end="22122"/>
    <type7:Sentence xmi:id="171031" sofa="8" begin="22124" end="22231"/>
    <type7:Sentence xmi:id="171712" sofa="8" begin="22233" end="22351"/>
    <type7:Sentence xmi:id="172231" sofa="8" begin="22353" end="22484"/>
    <type7:Sentence xmi:id="173193" sofa="8" begin="22486" end="22604"/>
    <type7:Sentence xmi:id="173712" sofa="8" begin="22606" end="22697"/>
    <type7:Sentence xmi:id="174203" sofa="8" begin="22699" end="22770"/>
    <type7:Sentence xmi:id="174567" sofa="8" begin="22772" end="22879"/>
    <type7:Sentence xmi:id="175177" sofa="8" begin="22881" end="22904"/>
    <type7:Sentence xmi:id="175315" sofa="8" begin="22905" end="23042"/>
    <type7:Sentence xmi:id="176119" sofa="8" begin="23044" end="23166"/>
    <type7:Sentence xmi:id="176783" sofa="8" begin="23168" end="23282"/>
    <type7:Sentence xmi:id="177616" sofa="8" begin="23284" end="23434"/>
    <type7:Sentence xmi:id="178731" sofa="8" begin="23435" end="23451"/>
    <type7:Sentence xmi:id="178840" sofa="8" begin="23452" end="23547"/>
    <type7:Sentence xmi:id="179557" sofa="8" begin="23549" end="23693"/>
    <type7:Sentence xmi:id="180377" sofa="8" begin="23695" end="23860"/>
    <type7:Sentence xmi:id="181517" sofa="8" begin="23861" end="24001"/>
    <type7:Sentence xmi:id="182424" sofa="8" begin="24002" end="24164"/>
    <type7:Sentence xmi:id="183406" sofa="8" begin="24165" end="24261"/>
    <type7:Sentence xmi:id="184009" sofa="8" begin="24263" end="24409"/>
    <type7:Sentence xmi:id="184900" sofa="8" begin="24411" end="24546"/>
    <type7:Sentence xmi:id="185882" sofa="8" begin="24548" end="24616"/>
    <type7:Sentence xmi:id="186418" sofa="8" begin="24617" end="24693"/>
    <type7:Sentence xmi:id="186847" sofa="8" begin="24695" end="24843"/>
    <type7:Sentence xmi:id="187845" sofa="8" begin="24845" end="24912"/>
    <type7:Sentence xmi:id="188209" sofa="8" begin="24913" end="25029"/>
    <type7:Sentence xmi:id="188793" sofa="8" begin="25031" end="25164"/>
    <type7:Sentence xmi:id="189613" sofa="8" begin="25166" end="25277"/>
    <type7:Sentence xmi:id="190255" sofa="8" begin="25279" end="25426"/>
    <type7:Sentence xmi:id="191003" sofa="8" begin="25428" end="25568"/>
    <type7:Sentence xmi:id="191696" sofa="8" begin="25570" end="25862"/>
    <type7:Sentence xmi:id="193375" sofa="8" begin="25864" end="25959"/>
    <type7:Sentence xmi:id="194000" sofa="8" begin="25961" end="26052"/>
    <type7:Sentence xmi:id="194578" sofa="8" begin="26054" end="26133"/>
    <type7:Sentence xmi:id="195068" sofa="8" begin="26135" end="26337"/>
    <type7:Sentence xmi:id="196288" sofa="8" begin="26339" end="26420"/>
    <type7:Sentence xmi:id="196697" sofa="8" begin="26422" end="26624"/>
    <type7:Sentence xmi:id="198141" sofa="8" begin="26626" end="26666"/>
    <type7:Sentence xmi:id="198460" sofa="8" begin="26667" end="26914"/>
    <type7:Sentence xmi:id="200030" sofa="8" begin="26916" end="27056"/>
    <cas:View sofa="8" members="33663 34302 34957 35040 35611 36543 37185 37840 38886 39331 39595 40040 40637 41515 42025 42693 43283 43741 44280 45061 45344 45553 45959 46692 47825 48373 48960 49198 49572 50632 51278 51513 51903 52943 53407 53987 54907 55853 56555 57183 57534 57921 58721 58998 59857 60793 61626 62808 63666 64185 64711 65272 65762 66721 67450 67866 68502 68876 69887 70125 70447 70782 71188 71888 72362 73670 73821 74870 74927 75928 76651 77649 78007 78959 79698 80211 81014 82102 82948 83399 83815 84425 85128 85502 86253 86892 87424 88130 89108 89524 90353 91137 91443 92779 93198 93530 93865 94213 95417 95723 96207 96940 97485 98299 98757 99664 100096 100667 101506 101980 102745 103739 104142 104956 105692 106772 107731 108037 108489 109031 109718 110024 110911 111727 112285 113073 113560 115155 115490 116116 116574 117372 118550 119121 119566 120372 121088 121675 122285 122620 123233 123911 124372 124898 125343 126215 127558 128071 128390 128819 129287 129897 130342 130758 131174 131590 132035 132425 132854 133231 133973 134392 134911 135614 136075 136853 138146 138481 139857 140829 141542 142100 142487 142929 143892 144977 145186 145724 146088 146889 147411 147795 149092 149579 150835 150879 151910 152423 152480 152841 153473 153999 155482 155788 155832 156650 157788 158392 159377 160126 160571 161035 161341 161605 162176 163361 164016 164720 165413 166052 166800 167455 167868 168503 169184 169742 171031 171712 172231 173193 173712 174203 174567 175177 175315 176119 176783 177616 178731 178840 179557 180377 181517 182424 183406 184009 184900 185882 186418 186847 187845 188209 188793 189613 190255 191003 191696 193375 194000 194578 195068 196288 196697 198141 198460 200030"/>
    <cas:View sofa="1"/>
</xmi:XMI>
