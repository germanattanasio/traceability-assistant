<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmlns:cas="http:///uima/cas.ecore" xmlns:type="http:///org/apache/uima/ruta/type.ecore" xmlns:xmi="http://www.omg.org/XMI" xmlns:type5="http:///org/cleartk/timeml/type.ecore" xmlns:type4="http:///org/cleartk/syntax/dependency/type.ecore" xmlns:type2="http:///org/cleartk/ne/type.ecore" xmlns:type7="http:///org/cleartk/util/type.ecore" xmlns:cdetector="http:///edu/isistan/carcha/concern/cdetector.ecore" xmlns:tcas="http:///uima/tcas.ecore" xmlns:type6="http:///org/cleartk/token/type.ecore" xmlns:type3="http:///org/cleartk/syntax/constituent/type.ecore" xmlns:ne="http:///org/cleartk/type/ne.ecore" xmi:version="2.0">
    <cas:NULL xmi:id="0"/>
    <cas:Sofa xmi:id="1" sofaNum="2" sofaID="UriView" sofaURI="file:/Users/rgonzalez/Documents/tesis/carchaTK/carcha/src/test/resources/ddd/1raw/pet_store"/>
    <cas:Sofa xmi:id="8" sofaNum="1" sofaID="_InitialView" mimeType="text/plain" sofaString="PetStore ArchitectureBackground.&#10;&#10;Contents:&#10;1 Architecture Background.&#10;2 Problem Background.&#10;2.1 System Overview.&#10;2.2 Context and Scope.&#10;2.3 Driving Requirements of the petstore.&#10;2.3.1 Categories and description.&#10;2.3.2 Shopping cart.&#10;2.3.3 User information.&#10;2.3.4 Interaction with the Order Processsing Center.&#10;2.3.5 Purchasing.&#10;3 Solution Background.&#10;3.1 Architectural Approaches to the Petstore.&#10;3.2 Analysis Results.&#10;3.3 Mapping Requirements to Architecture.&#10;&#10;The application can be divided into modules based on functionality, such separation reduces the dependency between modules and allows them to be developed independently. &#10;In addition, identifying interfaces between modules enables modules to be developed by third-party component providers.&#10;In this view, the application is divided into these modules.&#10;A control module to create and maintain user account information, which includes a user identifier, billing, and contact information. &#10;This information is maintained in a database. &#10;The control module also creates and manages the user's shopping cart and controls the interactions with the user.&#10;A sign-on module to handle the user log-in process and security, such as verifying a user identifier and password.&#10;A product catalog module that returns product information from the catalog based on a user's search criteria.&#10;A customer module that manages a user's purchasing process and maintains account records for a customer.&#10;A messaging module that enables the application to send and receive asynchronous messages containing purchase orders.&#10;&#10;Architectural Approaches to the Petstore use of an MVC framework, functional separation makes applications more reliable and easier to maintain and extend. &#10;Application components developed for a MVC framework are often more reusable, as well.&#10;Separation of web and business logic. The application will use enterprise beans to have scalability, reliability, a component-based development model, and common horizontal services such as persistence, asynchronous communication,and declarative transaction and security control.&#10;Local bean logic. The Pet Store site uses enterprise beans that reside on the same machine, and JVM, as their clients. &#10;This approach &quot;improves performance and simplifies development&quot;. &#10;When enterprise beans are distributed among several machines the communication between components is done through remote interfaces. &#10;This &quot;improve(s) scalability and availability, but the high cost of remote communication makes them appropriate mostly for granularity operations&quot;.&#10;&#10;The Java Pet Store website uses both synchronous and asynchronous communication. &#10;It &quot;accesses its catalog synchronously, because accessing a catalog is a fast operation. &#10;It transmits purchase orders asynchronously because orders may take a long while to complete, and the order processing center may not always be available.&quot;&#10;&#10;Browse catalog, will be addressed by several modules and views.&#10;Data model view: The petstoredb view describes the elements that will be exposed.&#10;Runtime view: Browse catalog works just like any other HTTP request from the user.&#10;Module view: The catalog package (from the components package) directly addresses the Browse catalog use case.&#10;&#10;Similar to Browse catalog there are elements in the different views that deal with this use case.&#10;Runtime view: Manage account works just like any other HTTP request from the user.&#10;Module view: The following packages from the components package address the Manage account use case: signon, cart, customer, contactInfo, and address.&#10;&#10;Receive customer order status. This use case is addressed by the OPC application.&#10;Runtime view: Place orders works just like any other HTTP request from the user.&#10;Module view: The supplierpo and purchaseorder packages from the components package address the place orders use case.&#10;&#10;The WAF, Web Application Framework, provides the framework for a Model-View representation of the application.&#10;The waf controller web package is the view, and the waf controller ejb package is the model, they interact in several ways:&#10;direct invocation and indirect invocation.&#10;The model uses the waf event package to receive and send messages to the view.&#10;&#10;Events and actions are closely related: HTMLActions create Events, each HTMLAction creates one type of event.&#10;Events carry information about the phenomena, events do not know about actions.&#10;For every type of Event there can be just one unique type of EJBAction that uses it as input.&#10;This separation promotes flexibility and scalability as it reduces the cohesion between classes and it even allows classes from other packages to &quot;hear&quot; this events, without changing any code in the model.&#10;&#10;Administration application: Corresponds to a Java rich client application that is launched via Java Web Start, it allows an administrator user to review and modify orders submitted by Pet Store clients.&#10;Order Processing Center: It consists of server-side components that asynchronously receive and process orders submitted byusers through &quot;app&quot; petstore.&#10;&#10;E-commerce application: It is a web application that allows Internet users to register, browse the catalog and place oders for pets.&#10;Web Application Framework (waf): Library that provides a facade to petstore to manipulate events, user actions and application controllers.&#10;Address: Package that contains an entity bean and auxiliary classes that represent the address of the user.&#10;asyncsender: Package that contains a session bean and auxiliary classes that handle the connection to the Order Processing Center component using asynchronous communication.&#10;cart: Package that contains a session bean and auxiliary classes that represent the shopping cart.&#10;catalog: Package that contains an entity bean and auxiliary classes that represent the product catalog.&#10;components: Library that provides the core (shared) components for the applications. Refinement view available.&#10;contactinfo: Package that contains an entity bean and auxiliary classes that represent the contact information of the user.&#10;creditcard: Package that contains an entity bean and auxiliary classes that represent credit card information.&#10;customer: Package that contains three entity beans and auxiliary classes that represent information about a customer (includes contact information and credit card)&#10;Encondingfilter web: Package that contains a servlet filter responsible for setting the character encoding defined in the configuration for http requests.&#10;lineitem: Package that contains an entity bean and auxiliary classes that represent information of one item of an order.&#10;mailer: Package that contains a message-driven bean and auxiliary classes used to send emails.&#10;processmanager: Package that contains a session bean, an entity bean and auxiliary classes that are responsible for managing the workflow process that takes place when a new purchase order is received.&#10;purchaseorder: Package that contains an entity bean and auxiliary classes that represent information about a purchase order.&#10;servicelocator: Package that contains classes that implement the Service Locator pattern, used to lookup resources such as EJB homes and JMS destinations.&#10;signon: Package that contains a session bean, an entity bean, a servlet, a servlet filter and auxiliary classes that are responsible for authentication of web users (sign-on).&#10;supplierpo: Package that contains an entity bean and auxiliary classes that represent the information related to a processing order for the supplier.&#10;uidgen: Package that contains a session bean and an entity bean that are responsible for generation of unique identifiers for rows in database tables.&#10;util-tracer: Package with utility functionality to debug and trace.&#10;xmldocuments: Package with utility functionality to transform XML documents.&#10;&#10;address ejb: Entity bean that tracks two lines of street address, state, zip code, and country.&#10;asyncsender ejb: Contains a stateless session bean that converts shopping cart contents and customer data into an XML message representing an order, and sends the message to the Order Processing Center.&#10;cart ejb: Contains a stateful session bean that maintains the contents of an individual user’s virtual shopping cart.&#10;cart item: Represents an individual line item of the shopping cart, used by the cart ejb session bean to find the subtotal in the cart and to create a list of items in the shopping cart.&#10;&#10;client CatalogHelper: Makes calls to the local Catalog EJB or access the catalog directly over JDBC.&#10;CatalogDAO: Interface which will be implemented by database specific code, this class encapsulates all the SQL calls made by Catalog EJB.&#10;CatalogDAOFactory: Factory for objects that implement CatalogDAO, Uses the deployment descriptor to know what class to create&#10;GenericCatalogDAO: This class implements CatalogDAO for pointbase DB.&#10;CatalogDAO class encapsulates all the SQL calls made by Catalog EJB.&#10;CatalogDAO layer maps the relational data stored in the database to the objects needed by Catalog EJB.&#10;PointBaseCatalogDAO: This class implements CatalogDAO for pointbase DB, this class encapsulates all the SQL calls made by Catalog EJB.&#10;PointBaseCatalogDAO: layer maps the relational data stored in the database to the objects needed by Catalog EJB.&#10;CatalogEJB: Session Bean implementation of CatalogDAO.&#10;model Category: This class represents different categories of pets in the Java Pet Store demo, each category can have one or more products under it and each product in turn can have one or more inventory items under it. For example, the Java Pet Store Demo currently has five categories: birds, cats, dogs, fish, and reptiles.&#10;&#10;contactinfo ejb: Entity bean that tracks family and given name, telephone, email, and address, uses Container-managed persistence.&#10;creditcard ejb: Entity bean that tracks card number, card type, and expiration date. Uses Container-managed persistence. Uses Container-managed persistence.&#10;customer account ejb: Entity bean that tracks account status, credit card, and contact info, uses Container-managed persistence.&#10;customer ejb: Entity bean that tracks customer ID (primary key), account, and profile, uses Container-managed persistence.&#10;customer profile ejb: Entity bean that tracks preferred language, category, list preference, and banner preference, uses Container-managed persistence.&#10;customer profile ejb: Class contains the same profile information that ProfileEJB, it is used by the actions and events classes.&#10;encodingfilter: Ensures that every page the pet store serves to browsers has the appropriate encoding.&#10;lineitem ejb: Entity bean that tracks each line of products in a cart: category ID, product ID, item ID, quantity and unit price, uses Container-managed persistence&#10;mail ejb: Takes the messages that arrive in the mailer queue, transforms them to email objects and sends them.&#10;mail ejb: Represents the message in an email (to, from, cc, bcc, subject, body), a helper class to create and send mail. Creates an email message and sends it using the J2EE mail services.&#10;processmanager ejb&#10;Handles the workflow process to fullfil an order. Further refinement is available.&#10;purchaseorder ejb &quot;SessionBean&quot;PurchaseOrderEJB&#10;Session bean that keeps the information related a purchase order: localization, order ID, user ID, email ID;, order date, shipping info, billing info, total price, credit card and the corresponding line items. By default the localization is set to american English.&#10;servicelocator&#10;Implements the Service Locator pattern. It is used to looukup resources such as EJBHomes, JMS Destinations, etc. Uses the singleton strategy and also the caching strategy. Has to implementations: one to be used by the EJB tier and another one intended to be used on the web tier.&#10;signon ejb: Package that contains a session bean, an entity bean, a servlet, a servlet filter and auxiliary classes that are responsible for authentication of web users (sign-on).&#10;supplier ejb: Entity bean that tracks supplier order information: Order Id, order date, shipping info, and corresponding line items.&#10;uidgen ejb: Contains a stateless session bean that creates globally unique object identifiers.&#10;&#10;There is a one-to-one mapping from tables in the petstoredb to entity beans in the components group. Furthermore the entity beans that do not map the petstoredb map to the (so far undocumented data views) opcdb and supplierdb.&#10;&#10;The lack of documentation is almost the rule in the source code, most of the descriptions have been gathered from Sun's architectural documentation and educated assumptions from the authors of this architecture document.&#10;ProfileInfo: There is no information in the source code on why this is done but it is infered that is chosen to simplify interaction with other classes, in particular with the customer related classes in the petstore controller space (ejb CustomerEJBAction, web CustomerHTMLAction, events CustomerEvent).&#10;&#10;The Java Pet Store sample application application resembles a business-to-consumer ecommerce website and the enterprise information systems (EISs) behind it. The Java Pet Store has a decoupled enterprise architecture that can interoperate with existing data sources and business partners’ systems, all built on top of the J2EE platform. This application comprises four separate sub-applications that cooperate to fulfill the enterprise’s business needs, each of which is a J2EE application: pet store e-commerce Web site (“petstore”). A Web application which shoppers use to purchase merchandise through a Web browser pet store administration application (“petstoreadmin”). A Web application that enterprise administrators use to view sales statistics and manually accept or reject orders. While petstoreadmin is a Web application, its user interface is a rich client that uses XML messaging, rather than an HTML Web browser order processing center (“OPC”). A process-oriented application that manages order fulfillment by providing the following services to other enterprise participants: receives and processes XML documents, via JMS, containing orders from the petstore provides petstoreadmin application with order data using XML messaging over HTTP sends email to customers acknowledging orders using JavaMail. sends XML order documents to suppliers via JMS maintains purchase order database supplier. A process-oriented application that manages shipping products to customers by providing the following services: receives XML order documents from opc via JMS ships products to customers provides manual inventory management through a Web-based interface maintains inventory database.&#10;&#10;In the Web tier, the template service assembles multiple JSP pages and Web resources into a single composite view. Much of the data in application views is generated by custom tags, which in turn use data resources such as entity beans with CMP, JDBC connections, connectors, or JMS providers. To ensure isolation, all access to such data resources for a single composite view must occur under the scope of a transaction.&#10;There is no way to automatically start a transaction in response to executing a Web-tier method, as can be done with an enterprise bean method. Therefore, the pet store uses programmatic transaction control in the template service servlet TemplateServlet. TemplateServlet begins a UserTransaction before it forwards a request to the template JSP page, and ends the transaction after the forward has completed.&#10;&#10;EJBController: Interprets and executes events as EJB actions in the EJB tier, events and EJB actions make it easy to add new business logic while maintaining a clear design.&#10;Front Controller: Receives and processes every HTTP request (except those intercepted by servlet filters), the Front Controller servlet coordinates all other control components to dispatch requests and to select and generate views. Because it is a servlet, it can create content of any type, including binary content types.&#10;petstoredb: Database for the Petstore ecommerce application.&#10;Request Processor: Maps request URLs to actions in the Web tier.Web-tier action classes make it easy for developers to addWeb-tier functionality incrementally, while maintaining an easy-to-understand application design.&#10;Screen Flow Manager: Determines what screen to display after each request is serviced, Screen flow control is defined declaratively in an XML configuration file, so new views and screen flows are easy to add.&#10;Servlet Filters: May be placed in front of the Front Controller servlet to add functionality that applies to all requests.&#10;Template Service: A servlet that &quot;assembles multiple content sources, often JSP pages, into a template that provides a common look and feel to all views, using JSP pages to create most content makes new views easy to construct.&#10;&#10;AccountEJBTable: Contains information about user accounts: status, a reference to contact information, a reference to credit card information, and a reference to its corresponding customer information, if any.&#10;AddressEJBTable: full streetName, city, state, country, zipCode, and the a reference to its corresponding contact information, if any.&#10;&#10;CATEGORY_DETAILS: Includes all the information about a category: category ID, name of the category, the path to an image, category description, and localization information (language-country).&#10;ContactInfoEJBTable: Contains the contact information for a customer: a reference to its address, email, full name (given name and family name), telephone, and a reference to its account information, if any.&#10;CounterEJBTable: Represents a counter with a specific prefix; used only by UniqueIdGeneratorEJB to manage series of unique numbers, keeps the counter for each table, this follows the Counter EJB Pattern (see reference). It has the current counter, and the name of the table.&#10;CreditCardEJBTable: Contains the credit card information: card number, card type, expiration date and reference to its corresponding account information.&#10;CustomerEJBTable: Contains profile and account information about a customer, it includes the user ID of the customer and its corresponding account and profile information. The user IDs are not restricted to be the same names used in the UserEJBTable.&#10;ITEM: Contains the item's ID and the ID of the product it is classified as.&#10;ITEM_DETAILS: Includes all the information about an item: ID, list price, unit cost, localization information (language and country that the currency is in), path to the item's image, a description of the item and 5 custom attributes.&#10;PRODUCT: This table includes the product's ID and the ID of the category it belongs to.&#10;PRODUCT_DETAILS: Includes all the information about a product: ID, name of the product, path to its image, and a description of the product, and localization information (language and country that the product name and description are in).&#10;ProfileEJBTable: Contains profile information code for the banner preference, the code of the list preference, any language preference -language and country format is expected but this format is not enforced-, a reference to the customer information it refers to (if any) and, the name of the favorite category -not restricted to the CATEGORY_DETAILS names-, if any.&#10;UserEJBTable: Contains log-in information: username and password. The usernames are not restricted to be the same used in the CustomerEJBTable.&#10;&#10;To add internationalization support to the catalog items a separation is established. A table will have an ID and another table will have the localization details for that ID. For example, the CATEGORY table includes a category ID, &quot;FISH&quot;, the CATEGORY_DETAILS table will have several entries for &quot;FISH&quot;, one per language: English from the US (en_US), Spanish from Colombia (sp_CO), etc.&#10;Other Information&#10;&#10;Double linked tables: In order to improve performance tables will have column that points back to the record that is using them. For example, CustomerEJBTable has the ID of ProfileEJBTable as a foreign key. ProfileEJBTable has a &quot;reverse_profile_userId&quot; column that links back to the record in CustomerEJBTable that is using it. This relation works because a customer can only have 1 profile.&#10;The information in this architectural diagram represents the information in the code. There are missing constraints that can improve the quality of the data.&#10;Restrict the userIds of CustomerEJBTable to the ones that exist in the UserEJBTable.&#10;Restrict the favoriteCategory of ProfileEJBTable to the ones in CATEGORY.&#10;Create a table to enumerate the possible account status. (AccountEJBTable)&#10;Create a table to enumerate the possible list and banner preferences (ProfileEJBTable).&#10;&#10;Account EJB: Tracks account status, credit card, and contact info, entity bean, belongs to customer-ejb-jar.&#10;Address EJB: Tracks two lines of street address, state, zip code, and countryEntity bean that keeps the information related to address from the customer.&#10;Catalog EJB: Session Bean implementation of Catalog, belongs to catalog-ejb-jar.&#10;Credit Card EJB: Tracks card number, card type, and expiration date. &#10;ContactInfo EJB: Tracks family and given name, telephone, email, and address, entity bean, belongs to customer-ejb-jar.&#10;Counter EJB: represents a counter with a specific prefix; used only by UniqueIdGeneratorEJB to manage series of unique numbers, session bean, belongs to uidgen-ejb-jar.&#10;CustomerInfo EJB: Tracks customer ID (primary key), account, and profile, entity bean, belongs to customer-ejb-jar.&#10;Profile EJB: tracks preferred language, category, list preference, and banner preference, entity bean, belongs to customer-ejb-jar.&#10;ShoppingCartLocal EJB: This class represents the implementation of shopping cart as a session EJB, belongs to cart-ejb-jar.&#10;ShoppingClientFacadeLocal EJB: Provides a façade to all of the ejbs related to a shopping client, it is part of petstore-ejb-jar.&#10;ShoppingController EJB: Session Bean implementation for EJBController EJB. See the StateMachine for more details, belongs to petstore-ejb-jar.&#10;Signon: Checks if a user is allowed to sign on or to create new users,entity bean, belongs to signon-ejb-jar.&#10;User EJB: Represents a user who may sign on to the system; tracks a user name and password, session bean, belongs to signon-ejb-jar.&#10;StateMachine: Responsible for processing Events received from the client tier. As part of the WAF framework the events are generated by web actions.&#10;The State Machine ties all EJB components together dynamically at runtime thus providing support for reusable components.&#10;The mapping of the event names to handlers is mangaged by the JNDI key contained in Event:getEventName() which is looked up from an environment entry located in the EJB Deployment descriptor of the EJBClientController. A second option to event handling is to do so in the XML file.&#10;&#10;An alternative could be to have separate files for each jar file, allowing the application to be more distributed in more machines. On the other hand, having them in one file promotes performance since then connection time between beans from different libraries will be saved. This interaction is frequent and would create a big overhead."/>
    <type6:Sentence xmi:id="15" sofa="8" begin="0" end="32"/>
    <type6:Sentence xmi:id="19" sofa="8" begin="34" end="70"/>
    <type6:Sentence xmi:id="23" sofa="8" begin="71" end="92"/>
    <type6:Sentence xmi:id="27" sofa="8" begin="93" end="113"/>
    <type6:Sentence xmi:id="31" sofa="8" begin="114" end="136"/>
    <type6:Sentence xmi:id="35" sofa="8" begin="137" end="178"/>
    <type6:Sentence xmi:id="39" sofa="8" begin="179" end="212"/>
    <type6:Sentence xmi:id="43" sofa="8" begin="213" end="233"/>
    <type6:Sentence xmi:id="47" sofa="8" begin="234" end="257"/>
    <type6:Sentence xmi:id="51" sofa="8" begin="258" end="310"/>
    <type6:Sentence xmi:id="55" sofa="8" begin="311" end="328"/>
    <type6:Sentence xmi:id="59" sofa="8" begin="329" end="351"/>
    <type6:Sentence xmi:id="63" sofa="8" begin="352" end="397"/>
    <type6:Sentence xmi:id="67" sofa="8" begin="398" end="419"/>
    <type6:Sentence xmi:id="71" sofa="8" begin="420" end="461"/>
    <type6:Sentence xmi:id="75" sofa="8" begin="950" end="995"/>
    <type6:Sentence xmi:id="79" sofa="8" begin="1804" end="1841"/>
    <type6:Sentence xmi:id="83" sofa="8" begin="3223" end="3320"/>
    <type6:Sentence xmi:id="87" sofa="8" begin="3556" end="3586"/>
    <type6:Sentence xmi:id="91" sofa="8" begin="3587" end="3637"/>
    <type6:Sentence xmi:id="95" sofa="8" begin="4116" end="4194"/>
    <type6:Sentence xmi:id="99" sofa="8" begin="4196" end="4305"/>
    <type6:Sentence xmi:id="103" sofa="8" begin="4306" end="4385"/>
    <type6:Sentence xmi:id="107" sofa="8" begin="4386" end="4479"/>
    <type6:Sentence xmi:id="111" sofa="8" begin="5043" end="5175"/>
    <type6:Sentence xmi:id="115" sofa="8" begin="5801" end="5885"/>
    <type6:Sentence xmi:id="119" sofa="8" begin="5886" end="5912"/>
    <type6:Sentence xmi:id="123" sofa="8" begin="7710" end="7786"/>
    <type6:Sentence xmi:id="127" sofa="8" begin="9847" end="9882"/>
    <type6:Sentence xmi:id="131" sofa="8" begin="9883" end="9918"/>
    <type6:Sentence xmi:id="135" sofa="8" begin="10452" end="10554"/>
    <type6:Sentence xmi:id="139" sofa="8" begin="10952" end="11019"/>
    <type6:Sentence xmi:id="143" sofa="8" begin="11089" end="11121"/>
    <type6:Sentence xmi:id="147" sofa="8" begin="11380" end="11435"/>
    <type6:Sentence xmi:id="151" sofa="8" begin="11491" end="11563"/>
    <type6:Sentence xmi:id="155" sofa="8" begin="13232" end="13429"/>
    <type6:Sentence xmi:id="159" sofa="8" begin="13430" end="13568"/>
    <type6:Sentence xmi:id="163" sofa="8" begin="13569" end="13684"/>
    <type6:Sentence xmi:id="167" sofa="8" begin="14211" end="14301"/>
    <type6:Sentence xmi:id="171" sofa="8" begin="15825" end="15916"/>
    <type6:Sentence xmi:id="175" sofa="8" begin="15917" end="15977"/>
    <type6:Sentence xmi:id="179" sofa="8" begin="16198" end="16406"/>
    <type6:Sentence xmi:id="183" sofa="8" begin="16530" end="16757"/>
    <type6:Sentence xmi:id="187" sofa="8" begin="16759" end="16968"/>
    <type6:Sentence xmi:id="191" sofa="8" begin="16969" end="17103"/>
    <type6:Sentence xmi:id="195" sofa="8" begin="17105" end="17297"/>
    <type6:Sentence xmi:id="199" sofa="8" begin="17298" end="17505"/>
    <type6:Sentence xmi:id="203" sofa="8" begin="17726" end="17780"/>
    <type6:Sentence xmi:id="207" sofa="8" begin="17781" end="17934"/>
    <type6:Sentence xmi:id="211" sofa="8" begin="17935" end="18106"/>
    <type6:Sentence xmi:id="215" sofa="8" begin="18107" end="18185"/>
    <type6:Sentence xmi:id="219" sofa="8" begin="18186" end="18261"/>
    <type6:Sentence xmi:id="223" sofa="8" begin="18262" end="18496"/>
    <type6:Sentence xmi:id="227" sofa="8" begin="18497" end="18584"/>
    <type6:Sentence xmi:id="231" sofa="8" begin="18585" end="18823"/>
    <type6:Sentence xmi:id="235" sofa="8" begin="18824" end="19190"/>
    <type6:Sentence xmi:id="239" sofa="8" begin="19257" end="19334"/>
    <type6:Sentence xmi:id="243" sofa="8" begin="19336" end="19421"/>
    <type6:Sentence xmi:id="247" sofa="8" begin="19422" end="19511"/>
    <type6:Sentence xmi:id="251" sofa="8" begin="19512" end="19723"/>
    <type6:Sentence xmi:id="255" sofa="8" begin="19872" end="19949"/>
    <type6:Sentence xmi:id="259" sofa="8" begin="19950" end="20071"/>
    <type6:Sentence xmi:id="263" sofa="8" begin="20072" end="20135"/>
    <type6:Sentence xmi:id="267" sofa="8" begin="20136" end="20221"/>
    <type6:Sentence xmi:id="271" sofa="8" begin="20222" end="20293"/>
    <type6:Sentence xmi:id="275" sofa="8" begin="20294" end="20378"/>
    <type6:Sentence xmi:id="279" sofa="8" begin="20379" end="20452"/>
    <type6:Sentence xmi:id="283" sofa="8" begin="20453" end="20509"/>
    <type6:Sentence xmi:id="287" sofa="8" begin="20510" end="20615"/>
    <type6:Sentence xmi:id="291" sofa="8" begin="22208" end="22286"/>
    <type6:Sentence xmi:id="295" sofa="8" begin="22287" end="22356"/>
    <type6:Sentence xmi:id="299" sofa="8" begin="22698" end="22760"/>
    <type6:Sentence xmi:id="303" sofa="8" begin="22762" end="22893"/>
    <type6:Sentence xmi:id="307" sofa="8" begin="23039" end="23100"/>
    <type6:Sentence xmi:id="311" sofa="8" begin="754" end="814"/>
    <type6:Sentence xmi:id="315" sofa="8" begin="2084" end="2101"/>
    <type6:Sentence xmi:id="319" sofa="8" begin="2946" end="3027"/>
    <type6:Sentence xmi:id="323" sofa="8" begin="2882" end="2945"/>
    <type6:Sentence xmi:id="327" sofa="8" begin="3111" end="3221"/>
    <type6:Sentence xmi:id="331" sofa="8" begin="3404" end="3554"/>
    <type6:Sentence xmi:id="335" sofa="8" begin="3719" end="3836"/>
    <type6:Sentence xmi:id="339" sofa="8" begin="11020" end="11088"/>
    <type6:Sentence xmi:id="343" sofa="8" begin="10323" end="10451"/>
    <type6:Sentence xmi:id="347" sofa="8" begin="12368" end="12588"/>
    <type6:Sentence xmi:id="351" sofa="8" begin="12895" end="13052"/>
    <type6:Sentence xmi:id="355" sofa="8" begin="3321" end="3403"/>
    <type6:Sentence xmi:id="359" sofa="8" begin="3028" end="3110"/>
    <type6:Sentence xmi:id="363" sofa="8" begin="3638" end="3718"/>
    <type6:Sentence xmi:id="367" sofa="8" begin="9523" end="9629"/>
    <type6:Sentence xmi:id="371" sofa="8" begin="15008" end="15151"/>
    <cdetector:DesignDecision xmi:id="375" sofa="8" begin="1842" end="2083" kind="Availability" typex="availability"/>
    <cdetector:DesignDecision xmi:id="381" sofa="8" begin="2404" end="2551" kind="Availability" typex="availability"/>
    <cdetector:DesignDecision xmi:id="387" sofa="8" begin="7642" end="7709" kind="Availability" typex="availability"/>
    <cdetector:DesignDecision xmi:id="393" sofa="8" begin="14880" end="15007" kind="Availability" typex="availability"/>
    <cdetector:DesignDecision xmi:id="399" sofa="8" begin="15152" end="15263" kind="Availability" typex="availability"/>
    <cdetector:DesignDecision xmi:id="405" sofa="8" begin="15264" end="15417" kind="Availability" typex="availability"/>
    <cdetector:DesignDecision xmi:id="411" sofa="8" begin="1111" end="1225" kind="Security" typex="security"/>
    <cdetector:DesignDecision xmi:id="417" sofa="8" begin="19191" end="19256" kind="Security" typex="security"/>
    <cdetector:DesignDecision xmi:id="423" sofa="8" begin="22075" end="22207" kind="Security" typex="security"/>
    <cdetector:DesignDecision xmi:id="429" sofa="8" begin="463" end="632" kind="Modifiability" typex="modifiability"/>
    <cdetector:DesignDecision xmi:id="435" sofa="8" begin="815" end="948" kind="Modifiability" typex="modifiability"/>
    <cdetector:DesignDecision xmi:id="441" sofa="8" begin="997" end="1110" kind="Modifiability" typex="modifiability"/>
    <cdetector:DesignDecision xmi:id="447" sofa="8" begin="1226" end="1335" kind="Modifiability" typex="modifiability"/>
    <cdetector:DesignDecision xmi:id="453" sofa="8" begin="1336" end="1440" kind="Modifiability" typex="modifiability"/>
    <cdetector:DesignDecision xmi:id="459" sofa="8" begin="1441" end="1558" kind="Modifiability" typex="modifiability"/>
    <cdetector:DesignDecision xmi:id="465" sofa="8" begin="1560" end="1715" kind="Modifiability" typex="modifiability"/>
    <cdetector:DesignDecision xmi:id="471" sofa="8" begin="1717" end="1803" kind="Modifiability" typex="modifiability"/>
    <cdetector:DesignDecision xmi:id="477" sofa="8" begin="2270" end="2402" kind="Modifiability" typex="modifiability"/>
    <cdetector:DesignDecision xmi:id="483" sofa="8" begin="3838" end="3948" kind="Modifiability" typex="modifiability"/>
    <cdetector:DesignDecision xmi:id="489" sofa="8" begin="3949" end="4115" kind="Modifiability" typex="modifiability"/>
    <cdetector:DesignDecision xmi:id="495" sofa="8" begin="4480" end="4685" kind="Modifiability" typex="modifiability"/>
    <cdetector:DesignDecision xmi:id="501" sofa="8" begin="5176" end="5315" kind="Modifiability" typex="modifiability"/>
    <cdetector:DesignDecision xmi:id="507" sofa="8" begin="12589" end="12893" kind="Modifiability" typex="modifiability"/>
    <cdetector:DesignDecision xmi:id="513" sofa="8" begin="13685" end="13852" kind="Modifiability" typex="modifiability"/>
    <cdetector:DesignDecision xmi:id="519" sofa="8" begin="15593" end="15824" kind="Modifiability" typex="modifiability"/>
    <cdetector:DesignDecision xmi:id="525" sofa="8" begin="16407" end="16529" kind="Modifiability" typex="modifiability"/>
    <cdetector:DesignDecision xmi:id="531" sofa="8" begin="2102" end="2202" kind="Modifiability" typex="reduce coupling"/>
    <cdetector:DesignDecision xmi:id="537" sofa="8" begin="5316" end="5423" kind="Modifiability" typex="reduce coupling"/>
    <cdetector:DesignDecision xmi:id="543" sofa="8" begin="5424" end="5597" kind="Modifiability" typex="reduce coupling"/>
    <cdetector:DesignDecision xmi:id="549" sofa="8" begin="5598" end="5696" kind="Modifiability" typex="reduce coupling"/>
    <cdetector:DesignDecision xmi:id="555" sofa="8" begin="5697" end="5800" kind="Modifiability" typex="reduce coupling"/>
    <cdetector:DesignDecision xmi:id="561" sofa="8" begin="5913" end="6036" kind="Modifiability" typex="reduce coupling"/>
    <cdetector:DesignDecision xmi:id="567" sofa="8" begin="6037" end="6147" kind="Modifiability" typex="reduce coupling"/>
    <cdetector:DesignDecision xmi:id="573" sofa="8" begin="6148" end="6466" kind="Modifiability" typex="reduce coupling"/>
    <cdetector:DesignDecision xmi:id="579" sofa="8" begin="6467" end="6587" kind="Modifiability" typex="reduce coupling"/>
    <cdetector:DesignDecision xmi:id="585" sofa="8" begin="6588" end="6682" kind="Modifiability" typex="reduce coupling"/>
    <cdetector:DesignDecision xmi:id="591" sofa="8" begin="6683" end="6884" kind="Modifiability" typex="reduce coupling"/>
    <cdetector:DesignDecision xmi:id="597" sofa="8" begin="6885" end="7009" kind="Modifiability" typex="reduce coupling"/>
    <cdetector:DesignDecision xmi:id="603" sofa="8" begin="7010" end="7164" kind="Modifiability" typex="reduce coupling"/>
    <cdetector:DesignDecision xmi:id="609" sofa="8" begin="7165" end="7340" kind="Modifiability" typex="reduce coupling"/>
    <cdetector:DesignDecision xmi:id="615" sofa="8" begin="7341" end="7490" kind="Modifiability" typex="reduce coupling"/>
    <cdetector:DesignDecision xmi:id="621" sofa="8" begin="7491" end="7641" kind="Modifiability" typex="reduce coupling"/>
    <cdetector:DesignDecision xmi:id="627" sofa="8" begin="7788" end="7883" kind="Modifiability" typex="reduce coupling"/>
    <cdetector:DesignDecision xmi:id="633" sofa="8" begin="7884" end="8086" kind="Modifiability" typex="reduce coupling"/>
    <cdetector:DesignDecision xmi:id="639" sofa="8" begin="8087" end="8204" kind="Modifiability" typex="reduce coupling"/>
    <cdetector:DesignDecision xmi:id="645" sofa="8" begin="8205" end="8391" kind="Modifiability" typex="reduce coupling"/>
    <cdetector:DesignDecision xmi:id="651" sofa="8" begin="8393" end="8493" kind="Modifiability" typex="reduce coupling"/>
    <cdetector:DesignDecision xmi:id="657" sofa="8" begin="8494" end="8631" kind="Modifiability" typex="reduce coupling"/>
    <cdetector:DesignDecision xmi:id="663" sofa="8" begin="8828" end="8896" kind="Modifiability" typex="reduce coupling"/>
    <cdetector:DesignDecision xmi:id="669" sofa="8" begin="8897" end="8999" kind="Modifiability" typex="reduce coupling"/>
    <cdetector:DesignDecision xmi:id="675" sofa="8" begin="9000" end="9134" kind="Modifiability" typex="reduce coupling"/>
    <cdetector:DesignDecision xmi:id="681" sofa="8" begin="9135" end="9247" kind="Modifiability" typex="reduce coupling"/>
    <cdetector:DesignDecision xmi:id="687" sofa="8" begin="9248" end="9302" kind="Modifiability" typex="reduce coupling"/>
    <cdetector:DesignDecision xmi:id="693" sofa="8" begin="9631" end="9761" kind="Modifiability" typex="reduce coupling"/>
    <cdetector:DesignDecision xmi:id="699" sofa="8" begin="9762" end="9846" kind="Modifiability" typex="reduce coupling"/>
    <cdetector:DesignDecision xmi:id="705" sofa="8" begin="9919" end="10047" kind="Modifiability" typex="reduce coupling"/>
    <cdetector:DesignDecision xmi:id="711" sofa="8" begin="10048" end="10170" kind="Modifiability" typex="reduce coupling"/>
    <cdetector:DesignDecision xmi:id="717" sofa="8" begin="10171" end="10322" kind="Modifiability" typex="reduce coupling"/>
    <cdetector:DesignDecision xmi:id="723" sofa="8" begin="10555" end="10830" kind="Modifiability" typex="reduce coupling"/>
    <cdetector:DesignDecision xmi:id="729" sofa="8" begin="10831" end="10951" kind="Modifiability" typex="reduce coupling"/>
    <cdetector:DesignDecision xmi:id="735" sofa="8" begin="11122" end="11379" kind="Modifiability" typex="reduce coupling"/>
    <cdetector:DesignDecision xmi:id="741" sofa="8" begin="11623" end="11730" kind="Modifiability" typex="reduce coupling"/>
    <cdetector:DesignDecision xmi:id="747" sofa="8" begin="11731" end="11910" kind="Modifiability" typex="reduce coupling"/>
    <cdetector:DesignDecision xmi:id="753" sofa="8" begin="11911" end="12043" kind="Modifiability" typex="reduce coupling"/>
    <cdetector:DesignDecision xmi:id="759" sofa="8" begin="12044" end="12138" kind="Modifiability" typex="reduce coupling"/>
    <cdetector:DesignDecision xmi:id="765" sofa="8" begin="12140" end="12240" kind="Modifiability" typex="reduce coupling"/>
    <cdetector:DesignDecision xmi:id="771" sofa="8" begin="12241" end="12366" kind="Modifiability" typex="reduce coupling"/>
    <cdetector:DesignDecision xmi:id="777" sofa="8" begin="14701" end="14879" kind="Modifiability" typex="reduce coupling"/>
    <cdetector:DesignDecision xmi:id="783" sofa="8" begin="15419" end="15592" kind="Modifiability" typex="reduce coupling"/>
    <cdetector:DesignDecision xmi:id="789" sofa="8" begin="17506" end="17725" kind="Modifiability" typex="reduce coupling"/>
    <cdetector:DesignDecision xmi:id="795" sofa="8" begin="20617" end="20725" kind="Modifiability" typex="reduce coupling"/>
    <cdetector:DesignDecision xmi:id="801" sofa="8" begin="20726" end="20879" kind="Modifiability" typex="reduce coupling"/>
    <cdetector:DesignDecision xmi:id="807" sofa="8" begin="20880" end="20960" kind="Modifiability" typex="reduce coupling"/>
    <cdetector:DesignDecision xmi:id="813" sofa="8" begin="20961" end="21029" kind="Modifiability" typex="reduce coupling"/>
    <cdetector:DesignDecision xmi:id="819" sofa="8" begin="21031" end="21150" kind="Modifiability" typex="reduce coupling"/>
    <cdetector:DesignDecision xmi:id="825" sofa="8" begin="21151" end="21319" kind="Modifiability" typex="reduce coupling"/>
    <cdetector:DesignDecision xmi:id="831" sofa="8" begin="21320" end="21435" kind="Modifiability" typex="reduce coupling"/>
    <cdetector:DesignDecision xmi:id="837" sofa="8" begin="21436" end="21567" kind="Modifiability" typex="reduce coupling"/>
    <cdetector:DesignDecision xmi:id="843" sofa="8" begin="21568" end="21691" kind="Modifiability" typex="reduce coupling"/>
    <cdetector:DesignDecision xmi:id="849" sofa="8" begin="21692" end="21821" kind="Modifiability" typex="reduce coupling"/>
    <cdetector:DesignDecision xmi:id="855" sofa="8" begin="21822" end="21896" kind="Modifiability" typex="reduce coupling"/>
    <cdetector:DesignDecision xmi:id="861" sofa="8" begin="21897" end="21964" kind="Modifiability" typex="reduce coupling"/>
    <cdetector:DesignDecision xmi:id="867" sofa="8" begin="21965" end="22074" kind="Modifiability" typex="reduce coupling"/>
    <cdetector:DesignDecision xmi:id="873" sofa="8" begin="22357" end="22478" kind="Modifiability" typex="reduce coupling"/>
    <cdetector:DesignDecision xmi:id="879" sofa="8" begin="22479" end="22697" kind="Modifiability" typex="reduce coupling"/>
    <cdetector:DesignDecision xmi:id="885" sofa="8" begin="22894" end="23038" kind="Modifiability" typex="reduce coupling"/>
    <cdetector:DesignDecision xmi:id="891" sofa="8" begin="2553" end="2633" kind="Performance" typex="performance"/>
    <cdetector:DesignDecision xmi:id="897" sofa="8" begin="2635" end="2723" kind="Performance" typex="performance"/>
    <cdetector:DesignDecision xmi:id="903" sofa="8" begin="2725" end="2880" kind="Performance" typex="performance"/>
    <cdetector:DesignDecision xmi:id="909" sofa="8" begin="4890" end="5041" kind="Performance" typex="performance"/>
    <cdetector:DesignDecision xmi:id="915" sofa="8" begin="11564" end="11622" kind="Performance" typex="performance"/>
    <cdetector:DesignDecision xmi:id="921" sofa="8" begin="19724" end="19871" kind="Performance" typex="performance"/>
    <cdetector:DesignDecision xmi:id="927" sofa="8" begin="4687" end="4889" kind="Interoperability" typex="interoperability"/>
    <cdetector:DesignDecision xmi:id="933" sofa="8" begin="9303" end="9522" kind="Interoperability" typex="interoperability"/>
    <cdetector:DesignDecision xmi:id="939" sofa="8" begin="13053" end="13231" kind="Interoperability" typex="interoperability"/>
    <cdetector:DesignDecision xmi:id="945" sofa="8" begin="13853" end="14210" kind="Interoperability" typex="interoperability"/>
    <cdetector:DesignDecision xmi:id="951" sofa="8" begin="8632" end="8827" kind="Interoperability" typex="manage intefaces"/>
    <cdetector:DesignDecision xmi:id="957" sofa="8" begin="14302" end="14584" kind="Modifiability" typex="modifiability"/>
    <cdetector:DesignDecision xmi:id="963" sofa="8" begin="634" end="753" kind="Interoperability" typex="interoperability"/>
    <cdetector:DesignDecision xmi:id="969" sofa="8" begin="2204" end="2268" kind="Performance" typex="performance"/>
    <cdetector:DesignDecision xmi:id="981" sofa="8" begin="14586" end="14700" kind="Modifiability" typex="modifiability"/>
    <tcas:DocumentAnnotation xmi:id="993" sofa="8" begin="0" end="23100" language="x-unspecified"/>
    <cas:View sofa="8" members="15 19 23 27 31 35 39 43 47 51 55 59 63 67 71 75 79 83 87 91 95 99 103 107 111 115 119 123 127 131 135 139 143 147 151 155 159 163 167 171 175 179 183 187 191 195 199 203 207 211 215 219 223 227 231 235 239 243 247 251 255 259 263 267 271 275 279 283 287 291 295 299 303 307 311 315 319 323 327 331 335 339 343 347 351 355 359 363 367 371 375 381 387 393 399 405 411 417 423 429 435 441 447 453 459 465 471 477 483 489 495 501 507 513 519 525 531 537 543 549 555 561 567 573 579 585 591 597 603 609 615 621 627 633 639 645 651 657 663 669 675 681 687 693 699 705 711 717 723 729 735 741 747 753 759 765 771 777 783 789 795 801 807 813 819 825 831 837 843 849 855 861 867 873 879 885 891 897 903 909 915 921 927 933 939 945 951 957 963 969 981 993"/>
    <cas:View sofa="1"/>
</xmi:XMI>
